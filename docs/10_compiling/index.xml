<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1 Setting the playing field on HW/SW codesign</title>
    <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/</link>
    <description>Recent content in 1 Setting the playing field on HW/SW codesign</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</webMaster>
    <atom:link href="https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1 - Programming the RISC-V</title>
      <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/11_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/11_programming/</guid>
      <description>In the third year of the Bachelor program, you have done the course unit Computer architecture (3435). In this course you made an implementation for a RISC-V processor. This course (of which you are currently reading the course material) starts with one of the earlier implementations you made: the RV32I implementation. The processor runs a program and the ins-and-outs of this will be the handover point between both courses.&#xA;Assembly The implementation of the ISA is capable of executing instructions.</description>
    </item>
    <item>
      <title>2 - Compiling Bare Metal</title>
      <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/12_compiling_bare_metal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/12_compiling_bare_metal/</guid>
      <description>When you learned to write C, you might have been in touch with compiling already. In case you&amp;rsquo;re a master at compiling and cross compiling, this section is a refresher. In the other case (which also includes those that only clicked the Compile-button in an IDE), this section will guide you through the most import aspects (for this course).&#xA;Compiling is typically used to describe the proces that converts the C sources into a binary that can be executed.</description>
    </item>
    <item>
      <title>3 - Linking Bare Metal</title>
      <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/13_linking_bare_metal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/13_linking_bare_metal/</guid>
      <description>With the three object files generated, it is time to stich everything togehter. These object files are compiled, so they are converted to machine code. They are organised in sections and they all start at address 0x0. (At the bottom of this page, three object dumps are found so you can verify for yourself.) The image below shows which object file contains which sections. As mentioned before, it is the linker&amp;rsquo;s job to do the stiching.</description>
    </item>
    <item>
      <title>4 - Simulation</title>
      <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/14_simulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/14_simulation/</guid>
      <description>In this course you will have to work both on the hardware and on the software. To facilitate this kind of designing and developing, it will be invaluable to run simulation as smooth as possible. Before jumping to the testbench, it might useful to briefly refresh the concept of synthesisable hardware.&#xA;Synthesisable HDL All hardware description languages (HDLs) have a lingo that is used to describe a hardware design. Typically, these HDLs also have parts of their language dedicated to verification.</description>
    </item>
    <item>
      <title>5 - Exercises</title>
      <link>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/15_exercises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_hwswcodesign/10_compiling/15_exercises/</guid>
      <description>Practice makes perfect Below are a number of programming exercises. The aim is that you 1) retrieve your RISC-V implementation 2) prepare a working setup, and 3) refresh your low-level C programming skills.&#xA;As a reminder &amp;hellip; a zip archive to get you started can be found here.&#xA;Exercise 101 For this exercise you should simply try to get the zip file to work on your own RISC-V.&#xA;As FPGA device, you can pick a ZYNQ XC7Z020-1CLG400C.</description>
    </item>
  </channel>
</rss>
